// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open AbstractSyntax
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

  open System
  open AbstractSyntax

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | RPAREN
  | LPAREN
  | GT
  | GE
  | NEQ
  | EQ
  | LE
  | LT
  | DIV
  | MUL
  | SUB
  | ADD
  | FOLDP
  | LIFT3
  | LIFT2
  | LIFT1
  | IN
  | EQUAL
  | LET
  | ELSE
  | THEN
  | IF
  | ARROW
  | FUN
  | ID of (string)
  | NUM of (int)
  | UNIT
  | EOF
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_NEQ
    | TOKEN_EQ
    | TOKEN_LE
    | TOKEN_LT
    | TOKEN_DIV
    | TOKEN_MUL
    | TOKEN_SUB
    | TOKEN_ADD
    | TOKEN_FOLDP
    | TOKEN_LIFT3
    | TOKEN_LIFT2
    | TOKEN_LIFT1
    | TOKEN_IN
    | TOKEN_EQUAL
    | TOKEN_LET
    | TOKEN_ELSE
    | TOKEN_THEN
    | TOKEN_IF
    | TOKEN_ARROW
    | TOKEN_FUN
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_UNIT
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_expr
    | NONTERM_expr2
    | NONTERM_expr3
    | NONTERM_expr4
    | NONTERM_expr5
    | NONTERM_expr6

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | RPAREN  -> 0 
  | LPAREN  -> 1 
  | GT  -> 2 
  | GE  -> 3 
  | NEQ  -> 4 
  | EQ  -> 5 
  | LE  -> 6 
  | LT  -> 7 
  | DIV  -> 8 
  | MUL  -> 9 
  | SUB  -> 10 
  | ADD  -> 11 
  | FOLDP  -> 12 
  | LIFT3  -> 13 
  | LIFT2  -> 14 
  | LIFT1  -> 15 
  | IN  -> 16 
  | EQUAL  -> 17 
  | LET  -> 18 
  | ELSE  -> 19 
  | THEN  -> 20 
  | IF  -> 21 
  | ARROW  -> 22 
  | FUN  -> 23 
  | ID _ -> 24 
  | NUM _ -> 25 
  | UNIT  -> 26 
  | EOF  -> 27 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_RPAREN 
  | 1 -> TOKEN_LPAREN 
  | 2 -> TOKEN_GT 
  | 3 -> TOKEN_GE 
  | 4 -> TOKEN_NEQ 
  | 5 -> TOKEN_EQ 
  | 6 -> TOKEN_LE 
  | 7 -> TOKEN_LT 
  | 8 -> TOKEN_DIV 
  | 9 -> TOKEN_MUL 
  | 10 -> TOKEN_SUB 
  | 11 -> TOKEN_ADD 
  | 12 -> TOKEN_FOLDP 
  | 13 -> TOKEN_LIFT3 
  | 14 -> TOKEN_LIFT2 
  | 15 -> TOKEN_LIFT1 
  | 16 -> TOKEN_IN 
  | 17 -> TOKEN_EQUAL 
  | 18 -> TOKEN_LET 
  | 19 -> TOKEN_ELSE 
  | 20 -> TOKEN_THEN 
  | 21 -> TOKEN_IF 
  | 22 -> TOKEN_ARROW 
  | 23 -> TOKEN_FUN 
  | 24 -> TOKEN_ID 
  | 25 -> TOKEN_NUM 
  | 26 -> TOKEN_UNIT 
  | 27 -> TOKEN_EOF 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr2 
    | 7 -> NONTERM_expr2 
    | 8 -> NONTERM_expr2 
    | 9 -> NONTERM_expr2 
    | 10 -> NONTERM_expr2 
    | 11 -> NONTERM_expr2 
    | 12 -> NONTERM_expr2 
    | 13 -> NONTERM_expr3 
    | 14 -> NONTERM_expr3 
    | 15 -> NONTERM_expr3 
    | 16 -> NONTERM_expr4 
    | 17 -> NONTERM_expr4 
    | 18 -> NONTERM_expr4 
    | 19 -> NONTERM_expr5 
    | 20 -> NONTERM_expr5 
    | 21 -> NONTERM_expr5 
    | 22 -> NONTERM_expr5 
    | 23 -> NONTERM_expr5 
    | 24 -> NONTERM_expr5 
    | 25 -> NONTERM_expr6 
    | 26 -> NONTERM_expr6 
    | 27 -> NONTERM_expr6 
    | 28 -> NONTERM_expr6 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | NEQ  -> "NEQ" 
  | EQ  -> "EQ" 
  | LE  -> "LE" 
  | LT  -> "LT" 
  | DIV  -> "DIV" 
  | MUL  -> "MUL" 
  | SUB  -> "SUB" 
  | ADD  -> "ADD" 
  | FOLDP  -> "FOLDP" 
  | LIFT3  -> "LIFT3" 
  | LIFT2  -> "LIFT2" 
  | LIFT1  -> "LIFT1" 
  | IN  -> "IN" 
  | EQUAL  -> "EQUAL" 
  | LET  -> "LET" 
  | ELSE  -> "ELSE" 
  | THEN  -> "THEN" 
  | IF  -> "IF" 
  | ARROW  -> "ARROW" 
  | FUN  -> "FUN" 
  | ID _ -> "ID" 
  | NUM _ -> "NUM" 
  | UNIT  -> "UNIT" 
  | EOF  -> "EOF" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | FOLDP  -> (null : System.Object) 
  | LIFT3  -> (null : System.Object) 
  | LIFT2  -> (null : System.Object) 
  | LIFT1  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNIT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 8us; 65535us; 0us; 2us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 16us; 17us; 18us; 19us; 65us; 66us; 8us; 65535us; 0us; 20us; 6us; 20us; 8us; 20us; 10us; 20us; 12us; 20us; 16us; 20us; 18us; 20us; 65us; 20us; 14us; 65535us; 0us; 21us; 6us; 21us; 8us; 21us; 10us; 21us; 12us; 21us; 16us; 21us; 18us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 33us; 65us; 21us; 16us; 65535us; 0us; 38us; 6us; 38us; 8us; 38us; 10us; 38us; 12us; 38us; 16us; 38us; 18us; 38us; 22us; 38us; 24us; 38us; 26us; 38us; 28us; 38us; 30us; 38us; 32us; 38us; 34us; 35us; 36us; 37us; 65us; 38us; 18us; 65535us; 0us; 43us; 6us; 43us; 8us; 43us; 10us; 43us; 12us; 43us; 16us; 43us; 18us; 43us; 22us; 43us; 24us; 43us; 26us; 43us; 28us; 43us; 30us; 43us; 32us; 43us; 34us; 43us; 36us; 43us; 39us; 40us; 41us; 42us; 65us; 43us; 33us; 65535us; 0us; 61us; 6us; 61us; 8us; 61us; 10us; 61us; 12us; 61us; 16us; 61us; 18us; 61us; 22us; 61us; 24us; 61us; 26us; 61us; 28us; 61us; 30us; 61us; 32us; 61us; 34us; 61us; 36us; 61us; 39us; 61us; 40us; 44us; 41us; 61us; 42us; 44us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 49us; 50us; 50us; 51us; 52us; 53us; 53us; 54us; 54us; 55us; 55us; 56us; 57us; 58us; 58us; 59us; 59us; 60us; 65us; 61us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 12us; 21us; 36us; 53us; 72us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 9us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 1us; 6us; 3us; 6us; 13us; 14us; 1us; 7us; 3us; 7us; 13us; 14us; 1us; 8us; 3us; 8us; 13us; 14us; 1us; 9us; 3us; 9us; 13us; 14us; 1us; 10us; 3us; 10us; 13us; 14us; 1us; 11us; 3us; 11us; 13us; 14us; 1us; 13us; 3us; 13us; 16us; 17us; 1us; 14us; 3us; 14us; 16us; 17us; 3us; 15us; 16us; 17us; 1us; 16us; 2us; 16us; 19us; 1us; 17us; 2us; 17us; 19us; 2us; 18us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 52us; 54us; 58us; 60us; 64us; 66us; 70us; 72us; 76us; 78us; 82us; 84us; 88us; 90us; 94us; 96us; 100us; 104us; 106us; 109us; 111us; 114us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; |]
let _fsyacc_action_rows = 68
let _fsyacc_actionTableElements = [|11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 49152us; 1us; 32768us; 27us; 3us; 0us; 16385us; 1us; 32768us; 24us; 5us; 1us; 32768us; 22us; 6us; 11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16386us; 11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 1us; 32768us; 20us; 10us; 11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 1us; 32768us; 19us; 12us; 11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16387us; 1us; 32768us; 24us; 15us; 1us; 32768us; 17us; 16us; 11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 1us; 32768us; 16us; 18us; 11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16388us; 0us; 16389us; 8us; 16396us; 2us; 32us; 3us; 30us; 4us; 28us; 5us; 26us; 6us; 24us; 7us; 22us; 10us; 36us; 11us; 34us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16390us; 10us; 36us; 11us; 34us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16391us; 10us; 36us; 11us; 34us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16392us; 10us; 36us; 11us; 34us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16393us; 10us; 36us; 11us; 34us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16394us; 10us; 36us; 11us; 34us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16395us; 10us; 36us; 11us; 34us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16397us; 8us; 41us; 9us; 39us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 2us; 16398us; 8us; 41us; 9us; 39us; 2us; 16399us; 8us; 41us; 9us; 39us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 16400us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 8us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 16401us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 16402us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16403us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16404us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16405us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16406us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 4us; 32768us; 1us; 65us; 24us; 64us; 25us; 63us; 26us; 62us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 11us; 32768us; 1us; 65us; 12us; 57us; 13us; 52us; 14us; 48us; 15us; 45us; 18us; 14us; 21us; 8us; 23us; 4us; 24us; 64us; 25us; 63us; 26us; 62us; 1us; 32768us; 0us; 67us; 0us; 16412us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 12us; 13us; 15us; 16us; 18us; 20us; 32us; 33us; 45us; 47us; 59us; 61us; 73us; 74us; 76us; 78us; 90us; 92us; 104us; 105us; 106us; 115us; 124us; 127us; 136us; 139us; 148us; 151us; 160us; 163us; 172us; 175us; 184us; 187us; 196us; 199us; 208us; 211us; 214us; 223us; 228us; 237us; 242us; 247us; 248us; 253us; 258us; 259us; 264us; 269us; 274us; 275us; 280us; 285us; 290us; 295us; 296us; 301us; 306us; 311us; 312us; 313us; 314us; 315us; 316us; 328us; 330us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 4us; 6us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 3us; 1us; 2us; 3us; 4us; 5us; 4us; 1us; 1us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 16407us; 16408us; 16409us; 16410us; 16411us; 65535us; 65535us; 16412us; |]
let _fsyacc_reductions ()  =    [| 
# 264 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 273 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                       _1 
                   )
# 42 "Parser.fsy"
                 : expr));
# 284 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                       Fun (_2, _4) 
                   )
# 45 "Parser.fsy"
                 : 'expr));
# 296 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                       If (_2, _4, _6) 
                   )
# 46 "Parser.fsy"
                 : 'expr));
# 309 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                       Let (_2, _4, _6) 
                   )
# 47 "Parser.fsy"
                 : 'expr));
# 322 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                       _1 
                   )
# 48 "Parser.fsy"
                 : 'expr));
# 333 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                       Op (_1, Lt, _3) 
                   )
# 51 "Parser.fsy"
                 : 'expr2));
# 345 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                       Op (_1, Le, _3) 
                   )
# 52 "Parser.fsy"
                 : 'expr2));
# 357 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                       Op (_1, Eq, _3) 
                   )
# 53 "Parser.fsy"
                 : 'expr2));
# 369 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                       Op (_1, Neq, _3) 
                   )
# 54 "Parser.fsy"
                 : 'expr2));
# 381 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                       Op (_1, Ge, _3) 
                   )
# 55 "Parser.fsy"
                 : 'expr2));
# 393 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                       Op (_1, Gt, _3) 
                   )
# 56 "Parser.fsy"
                 : 'expr2));
# 405 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                       _1 
                   )
# 57 "Parser.fsy"
                 : 'expr2));
# 416 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                       Op (_1, Add, _3) 
                   )
# 60 "Parser.fsy"
                 : 'expr3));
# 428 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                       Op (_1, Sub, _3) 
                   )
# 61 "Parser.fsy"
                 : 'expr3));
# 440 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                       _1 
                   )
# 62 "Parser.fsy"
                 : 'expr3));
# 451 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                       Op (_1, Mul, _3) 
                   )
# 65 "Parser.fsy"
                 : 'expr4));
# 463 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                       Op (_1, Div, _3) 
                   )
# 66 "Parser.fsy"
                 : 'expr4));
# 475 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                       _1 
                   )
# 67 "Parser.fsy"
                 : 'expr4));
# 486 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr5)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                       App (_1, _2) 
                   )
# 70 "Parser.fsy"
                 : 'expr5));
# 498 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                       Lift (_2, [_3]) 
                   )
# 71 "Parser.fsy"
                 : 'expr5));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                       Lift (_2, [_3; _4]) 
                   )
# 72 "Parser.fsy"
                 : 'expr5));
# 523 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                       Lift (_2, [_3; _4; _5]) 
                   )
# 73 "Parser.fsy"
                 : 'expr5));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                       Foldp (_2, _3, _4) 
                   )
# 74 "Parser.fsy"
                 : 'expr5));
# 550 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                       _1 
                   )
# 75 "Parser.fsy"
                 : 'expr5));
# 561 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                       Unit 
                   )
# 78 "Parser.fsy"
                 : 'expr6));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                       Num _1 
                   )
# 79 "Parser.fsy"
                 : 'expr6));
# 582 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                       Var _1 
                   )
# 80 "Parser.fsy"
                 : 'expr6));
# 593 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                       _2 
                   )
# 81 "Parser.fsy"
                 : 'expr6));
|]
# 605 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let program lexer lexbuf : expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
