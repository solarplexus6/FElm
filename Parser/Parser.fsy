%{
  open System
  open AbstractSyntax
%}

%token EOF

%token UNIT
%token <int> NUM
%token <string> ID
%token FUN
%token ARROW
%token IF
%token THEN
%token ELSE
%token LET
%token EQUAL
%token IN
%token LIFT1
%token LIFT2
%token LIFT3
%token FOLDP

%token ADD
%token SUB
%token MUL
%token DIV
%token LT
%token LE
%token EQ
%token NEQ
%token GE
%token GT
%token LPAREN
%token RPAREN

%start program
%type <expr> program
%%

program:
| expr EOF                      { $1 }

expr:
| FUN ID ARROW expr             { Fun ($2, $4) }
| IF expr THEN expr ELSE expr   { If ($2, $4, $6) }
| LET ID EQUAL expr IN expr     { Let ($2, $4, $6) }
| expr2                         { $1 }

expr2:
| expr3 LT expr3                { Op ($1, Lt, $3) }
| expr3 LE expr3                { Op ($1, Le, $3) }
| expr3 EQ expr3                { Op ($1, Eq, $3) }
| expr3 NEQ expr3               { Op ($1, Neq, $3) }
| expr3 GE expr3                { Op ($1, Ge, $3) }
| expr3 GT expr3                { Op ($1, Gt, $3) }
| expr3                         { $1 }

expr3:
| expr3 ADD expr4               { Op ($1, Add, $3) }
| expr3 SUB expr4               { Op ($1, Sub, $3) }
| expr4                         { $1 }

expr4:
| expr4 MUL expr5               { Op ($1, Mul, $3) }
| expr4 DIV expr5               { Op ($1, Div, $3) }
| expr5                         { $1 }

expr5:
| expr5 expr6                   { App ($1, $2) }
| LIFT1 expr6 expr6             { Lift ($2, [$3]) }
| LIFT2 expr6 expr6 expr6       { Lift ($2, [$3; $4]) }
| LIFT3 expr6 expr6 expr6 expr6 { Lift ($2, [$3; $4; $5]) }
| FOLDP expr6 expr6 expr6       { Foldp ($2, $3, $4) }
| expr6                         { $1 }

expr6:
| UNIT                          { Unit }
| NUM                           { Num $1 }
| ID                            { Var $1 }
| LPAREN expr RPAREN            { $2 }

%%