%{
  open System
  open AbstractSyntax
%}

%token EOF

%token UNIT
%token <int> NUM
%token <string> ID
%token FUN
%token ARROW
%token IF
%token THEN
%token ELSE
%token LET
%token EQUAL
%token IN
%token LIFT1
%token LIFT2
%token LIFT3
%token FOLDP

%token ADD
%token SUB
%token MUL
%token DIV
%token LT
%token LE
%token EQ
%token NEQ
%token GE
%token GT
%token LPAREN
%token RPAREN

%left ID
%left LPAREN
%left ADD SUB
%left MUL DIV
%left FUN

%start program
%type <expr> program
%%

program:
| expr EOF { $1 }

expr:
| UNIT { Unit }
| NUM { Num $1 }
| ID { Var $1 }
| FUN ID ARROW expr { Fun ($2, $4) }
| expr expr { App ($1, $2) }
| expr ADD expr { Op ($1, Add, $3) }
| expr SUB expr { Op ($1, Sub, $3) }
| expr MUL expr { Op ($1, Mul, $3) }
| expr DIV expr { Op ($1, Div, $3) }
| expr LT expr { Op ($1, Lt, $3) }
| expr LE expr { Op ($1, Le, $3) }
| expr EQ expr { Op ($1, Eq, $3) }
| expr NEQ expr { Op ($1, Neq, $3) }
| expr GE expr { Op ($1, Ge, $3) }
| expr GT expr { Op ($1, Gt, $3) }
| IF expr THEN expr ELSE expr { If ($2, $4, $6) }
| LET ID EQUAL expr IN expr { Let ($2, $4, $6) }
// input
| LIFT1 expr expr { Lift ($2, [$3]) }
| LIFT2 expr expr expr { Lift ($2, [$3; $4]) }
| LIFT3 expr expr expr expr { Lift ($2, [$3; $4; $5]) }
| FOLDP expr expr expr { Foldp ($2, $3, $4) }
| LPAREN expr RPAREN { $2 }
